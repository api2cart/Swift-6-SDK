//
// CategoryAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class CategoryAPI {

    /**
     category.add
     
     - parameter name: (query) Defines category&#39;s name that has to be added 
     - parameter description: (query) Defines category&#39;s description (optional)
     - parameter shortDescription: (query) Defines short description (optional)
     - parameter parentId: (query) Adds categories specified by parent id (optional)
     - parameter avail: (query) Defines category&#39;s visibility status (optional, default to true)
     - parameter createdTime: (query) Entity&#39;s date creation (optional)
     - parameter modifiedTime: (query) Entity&#39;s date modification (optional)
     - parameter sortOrder: (query) Sort number in the list (optional, default to 0)
     - parameter metaTitle: (query) Defines unique meta title for each entity (optional)
     - parameter metaDescription: (query) Defines unique meta description of a entity (optional)
     - parameter metaKeywords: (query) Defines unique meta keywords for each entity (optional)
     - parameter seoUrl: (query) Defines unique category&#39;s URL for SEO (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter storesIds: (query) Create category in the stores that is specified by comma-separated stores&#39; id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CategoryAdd200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func categoryAdd(name: String, description: String? = nil, shortDescription: String? = nil, parentId: String? = nil, avail: Bool? = nil, createdTime: String? = nil, modifiedTime: String? = nil, sortOrder: Int? = nil, metaTitle: String? = nil, metaDescription: String? = nil, metaKeywords: String? = nil, seoUrl: String? = nil, storeId: String? = nil, storesIds: String? = nil, langId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> CategoryAdd200Response {
        return try await categoryAddWithRequestBuilder(name: name, description: description, shortDescription: shortDescription, parentId: parentId, avail: avail, createdTime: createdTime, modifiedTime: modifiedTime, sortOrder: sortOrder, metaTitle: metaTitle, metaDescription: metaDescription, metaKeywords: metaKeywords, seoUrl: seoUrl, storeId: storeId, storesIds: storesIds, langId: langId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     category.add
     - POST /category.add.json
     - Add new category in store
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter name: (query) Defines category&#39;s name that has to be added 
     - parameter description: (query) Defines category&#39;s description (optional)
     - parameter shortDescription: (query) Defines short description (optional)
     - parameter parentId: (query) Adds categories specified by parent id (optional)
     - parameter avail: (query) Defines category&#39;s visibility status (optional, default to true)
     - parameter createdTime: (query) Entity&#39;s date creation (optional)
     - parameter modifiedTime: (query) Entity&#39;s date modification (optional)
     - parameter sortOrder: (query) Sort number in the list (optional, default to 0)
     - parameter metaTitle: (query) Defines unique meta title for each entity (optional)
     - parameter metaDescription: (query) Defines unique meta description of a entity (optional)
     - parameter metaKeywords: (query) Defines unique meta keywords for each entity (optional)
     - parameter seoUrl: (query) Defines unique category&#39;s URL for SEO (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter storesIds: (query) Create category in the stores that is specified by comma-separated stores&#39; id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CategoryAdd200Response> 
     */
    open class func categoryAddWithRequestBuilder(name: String, description: String? = nil, shortDescription: String? = nil, parentId: String? = nil, avail: Bool? = nil, createdTime: String? = nil, modifiedTime: String? = nil, sortOrder: Int? = nil, metaTitle: String? = nil, metaDescription: String? = nil, metaKeywords: String? = nil, seoUrl: String? = nil, storeId: String? = nil, storesIds: String? = nil, langId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<CategoryAdd200Response> {
        let localVariablePath = "/category.add.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "description": (wrappedValue: description?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "short_description": (wrappedValue: shortDescription?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "parent_id": (wrappedValue: parentId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "avail": (wrappedValue: avail?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "created_time": (wrappedValue: createdTime?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "modified_time": (wrappedValue: modifiedTime?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort_order": (wrappedValue: sortOrder?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "meta_title": (wrappedValue: metaTitle?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "meta_description": (wrappedValue: metaDescription?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "meta_keywords": (wrappedValue: metaKeywords?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "seo_url": (wrappedValue: seoUrl?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "stores_ids": (wrappedValue: storesIds?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CategoryAdd200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     category.add.batch
     
     - parameter categoryAddBatch: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CategoryAddBatch200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func categoryAddBatch(categoryAddBatch: CategoryAddBatch, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> CategoryAddBatch200Response {
        return try await categoryAddBatchWithRequestBuilder(categoryAddBatch: categoryAddBatch, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     category.add.batch
     - POST /category.add.batch.json
     - Add new categories to the store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter categoryAddBatch: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CategoryAddBatch200Response> 
     */
    open class func categoryAddBatchWithRequestBuilder(categoryAddBatch: CategoryAddBatch, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<CategoryAddBatch200Response> {
        let localVariablePath = "/category.add.batch.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: categoryAddBatch, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CategoryAddBatch200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     category.assign
     
     - parameter categoryId: (query) Defines category assign, specified by category id 
     - parameter productId: (query) Defines category assign to the product, specified by product id 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CartConfigUpdate200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func categoryAssign(categoryId: String, productId: String, storeId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> CartConfigUpdate200Response {
        return try await categoryAssignWithRequestBuilder(categoryId: categoryId, productId: productId, storeId: storeId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     category.assign
     - POST /category.assign.json
     - Assign category to product
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter categoryId: (query) Defines category assign, specified by category id 
     - parameter productId: (query) Defines category assign to the product, specified by product id 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CartConfigUpdate200Response> 
     */
    open class func categoryAssignWithRequestBuilder(categoryId: String, productId: String, storeId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<CartConfigUpdate200Response> {
        let localVariablePath = "/category.assign.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "category_id": (wrappedValue: categoryId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "product_id": (wrappedValue: productId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CartConfigUpdate200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     category.count
     
     - parameter parentId: (query) Counts categories specified by parent id (optional)
     - parameter storeId: (query) Counts category specified by store id (optional)
     - parameter langId: (query) Counts category specified by language id (optional)
     - parameter avail: (query) Defines category&#39;s visibility status (optional, default to true)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter productType: (query) A categorization for the product (optional)
     - parameter findValue: (query) Entity search that is specified by some value (optional)
     - parameter findWhere: (query) Counts categories that are searched specified by field (optional)
     - parameter reportRequestId: (query) Report request id (optional)
     - parameter disableReportCache: (query) Disable report cache for current request (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CategoryCount200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func categoryCount(parentId: String? = nil, storeId: String? = nil, langId: String? = nil, avail: Bool? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, productType: String? = nil, findValue: String? = nil, findWhere: String? = nil, reportRequestId: String? = nil, disableReportCache: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> CategoryCount200Response {
        return try await categoryCountWithRequestBuilder(parentId: parentId, storeId: storeId, langId: langId, avail: avail, createdFrom: createdFrom, createdTo: createdTo, modifiedFrom: modifiedFrom, modifiedTo: modifiedTo, productType: productType, findValue: findValue, findWhere: findWhere, reportRequestId: reportRequestId, disableReportCache: disableReportCache, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     category.count
     - GET /category.count.json
     - Count categories in store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter parentId: (query) Counts categories specified by parent id (optional)
     - parameter storeId: (query) Counts category specified by store id (optional)
     - parameter langId: (query) Counts category specified by language id (optional)
     - parameter avail: (query) Defines category&#39;s visibility status (optional, default to true)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter productType: (query) A categorization for the product (optional)
     - parameter findValue: (query) Entity search that is specified by some value (optional)
     - parameter findWhere: (query) Counts categories that are searched specified by field (optional)
     - parameter reportRequestId: (query) Report request id (optional)
     - parameter disableReportCache: (query) Disable report cache for current request (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CategoryCount200Response> 
     */
    open class func categoryCountWithRequestBuilder(parentId: String? = nil, storeId: String? = nil, langId: String? = nil, avail: Bool? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, productType: String? = nil, findValue: String? = nil, findWhere: String? = nil, reportRequestId: String? = nil, disableReportCache: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<CategoryCount200Response> {
        let localVariablePath = "/category.count.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "parent_id": (wrappedValue: parentId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "avail": (wrappedValue: avail?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "created_from": (wrappedValue: createdFrom?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "created_to": (wrappedValue: createdTo?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "modified_from": (wrappedValue: modifiedFrom?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "modified_to": (wrappedValue: modifiedTo?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "product_type": (wrappedValue: productType?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "find_value": (wrappedValue: findValue?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "find_where": (wrappedValue: findWhere?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "report_request_id": (wrappedValue: reportRequestId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "disable_report_cache": (wrappedValue: disableReportCache?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CategoryCount200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     category.delete
     
     - parameter id: (query) Defines category removal, specified by category id 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CategoryDelete200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func categoryDelete(id: String, storeId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> CategoryDelete200Response {
        return try await categoryDeleteWithRequestBuilder(id: id, storeId: storeId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     category.delete
     - DELETE /category.delete.json
     - Delete category in store
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Defines category removal, specified by category id 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CategoryDelete200Response> 
     */
    open class func categoryDeleteWithRequestBuilder(id: String, storeId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<CategoryDelete200Response> {
        let localVariablePath = "/category.delete.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CategoryDelete200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     category.find
     
     - parameter findValue: (query) Entity search that is specified by some value 
     - parameter findWhere: (query) Entity search that is specified by the comma-separated unique fields (optional, default to "name")
     - parameter findParams: (query) Entity search that is specified by comma-separated parameters (optional, default to "whole_words")
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CategoryFind200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func categoryFind(findValue: String, findWhere: String? = nil, findParams: String? = nil, storeId: String? = nil, langId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> CategoryFind200Response {
        return try await categoryFindWithRequestBuilder(findValue: findValue, findWhere: findWhere, findParams: findParams, storeId: storeId, langId: langId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     category.find
     - GET /category.find.json
     - Search category in store. \"Laptop\" is specified here by default.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter findValue: (query) Entity search that is specified by some value 
     - parameter findWhere: (query) Entity search that is specified by the comma-separated unique fields (optional, default to "name")
     - parameter findParams: (query) Entity search that is specified by comma-separated parameters (optional, default to "whole_words")
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CategoryFind200Response> 
     */
    open class func categoryFindWithRequestBuilder(findValue: String, findWhere: String? = nil, findParams: String? = nil, storeId: String? = nil, langId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<CategoryFind200Response> {
        let localVariablePath = "/category.find.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "find_value": (wrappedValue: findValue.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "find_where": (wrappedValue: findWhere?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "find_params": (wrappedValue: findParams?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CategoryFind200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_categoryImageAdd: String, Sendable, CaseIterable {
        case base = "base"
        case thumbnail = "thumbnail"
    }

    /**
     category.image.add
     
     - parameter categoryId: (query) Defines category id where the image should be added 
     - parameter imageName: (query) Defines image&#39;s name 
     - parameter url: (query) Defines URL of the image that has to be added 
     - parameter type: (query) Defines image&#39;s types that are specified by comma-separated list 
     - parameter storeId: (query) Store Id (optional)
     - parameter label: (query) Defines alternative text that has to be attached to the picture (optional)
     - parameter mime: (query) Mime type of image http://en.wikipedia.org/wiki/Internet_media_type. (optional)
     - parameter position: (query) Defines image’s position in the list (optional, default to 0)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CategoryImageAdd200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func categoryImageAdd(categoryId: String, imageName: String, url: String, type: ModelType_categoryImageAdd, storeId: String? = nil, label: String? = nil, mime: String? = nil, position: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> CategoryImageAdd200Response {
        return try await categoryImageAddWithRequestBuilder(categoryId: categoryId, imageName: imageName, url: url, type: type, storeId: storeId, label: label, mime: mime, position: position, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     category.image.add
     - POST /category.image.add.json
     - Add image to category
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter categoryId: (query) Defines category id where the image should be added 
     - parameter imageName: (query) Defines image&#39;s name 
     - parameter url: (query) Defines URL of the image that has to be added 
     - parameter type: (query) Defines image&#39;s types that are specified by comma-separated list 
     - parameter storeId: (query) Store Id (optional)
     - parameter label: (query) Defines alternative text that has to be attached to the picture (optional)
     - parameter mime: (query) Mime type of image http://en.wikipedia.org/wiki/Internet_media_type. (optional)
     - parameter position: (query) Defines image’s position in the list (optional, default to 0)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CategoryImageAdd200Response> 
     */
    open class func categoryImageAddWithRequestBuilder(categoryId: String, imageName: String, url: String, type: ModelType_categoryImageAdd, storeId: String? = nil, label: String? = nil, mime: String? = nil, position: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<CategoryImageAdd200Response> {
        let localVariablePath = "/category.image.add.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "category_id": (wrappedValue: categoryId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "image_name": (wrappedValue: imageName.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "url": (wrappedValue: url.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "type": (wrappedValue: type.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "label": (wrappedValue: label?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "mime": (wrappedValue: mime?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "position": (wrappedValue: position?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CategoryImageAdd200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     category.image.delete
     
     - parameter categoryId: (query) Defines category id where the image should be deleted 
     - parameter imageId: (query) Define image id 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AttributeDelete200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func categoryImageDelete(categoryId: String, imageId: String, storeId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AttributeDelete200Response {
        return try await categoryImageDeleteWithRequestBuilder(categoryId: categoryId, imageId: imageId, storeId: storeId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     category.image.delete
     - DELETE /category.image.delete.json
     - Delete image
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter categoryId: (query) Defines category id where the image should be deleted 
     - parameter imageId: (query) Define image id 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AttributeDelete200Response> 
     */
    open class func categoryImageDeleteWithRequestBuilder(categoryId: String, imageId: String, storeId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AttributeDelete200Response> {
        let localVariablePath = "/category.image.delete.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "category_id": (wrappedValue: categoryId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "image_id": (wrappedValue: imageId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeDelete200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     category.info
     
     - parameter id: (query) Retrieves category&#39;s info specified by category id 
     - parameter storeId: (query) Retrieves category info  specified by store id (optional)
     - parameter langId: (query) Retrieves category info  specified by language id (optional)
     - parameter schemaType: (query) The name of the requirements set for the provided schema. (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,parent_id,name,description")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter reportRequestId: (query) Report request id (optional)
     - parameter disableReportCache: (query) Disable report cache for current request (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CategoryInfo200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func categoryInfo(id: String, storeId: String? = nil, langId: String? = nil, schemaType: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, reportRequestId: String? = nil, disableReportCache: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> CategoryInfo200Response {
        return try await categoryInfoWithRequestBuilder(id: id, storeId: storeId, langId: langId, schemaType: schemaType, responseFields: responseFields, params: params, exclude: exclude, reportRequestId: reportRequestId, disableReportCache: disableReportCache, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     category.info
     - GET /category.info.json
     - Get category info about category ID*** or specify other category ID.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Retrieves category&#39;s info specified by category id 
     - parameter storeId: (query) Retrieves category info  specified by store id (optional)
     - parameter langId: (query) Retrieves category info  specified by language id (optional)
     - parameter schemaType: (query) The name of the requirements set for the provided schema. (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,parent_id,name,description")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter reportRequestId: (query) Report request id (optional)
     - parameter disableReportCache: (query) Disable report cache for current request (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CategoryInfo200Response> 
     */
    open class func categoryInfoWithRequestBuilder(id: String, storeId: String? = nil, langId: String? = nil, schemaType: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, reportRequestId: String? = nil, disableReportCache: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<CategoryInfo200Response> {
        let localVariablePath = "/category.info.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "schema_type": (wrappedValue: schemaType?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "report_request_id": (wrappedValue: reportRequestId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "disable_report_cache": (wrappedValue: disableReportCache?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CategoryInfo200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     category.list
     
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter storeId: (query) Retrieves categories specified by store id (optional)
     - parameter langId: (query) Retrieves categorys specified by language id (optional)
     - parameter parentId: (query) Retrieves categories specified by parent id (optional)
     - parameter avail: (query) Defines category&#39;s visibility status (optional, default to true)
     - parameter productType: (query) A categorization for the product (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter findValue: (query) Entity search that is specified by some value (optional)
     - parameter findWhere: (query) Category search that is specified by field (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,parent_id,name,description")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter reportRequestId: (query) Report request id (optional)
     - parameter disableReportCache: (query) Disable report cache for current request (optional, default to false)
     - parameter disableCache: (query) Disable cache for current request (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ModelResponseCategoryList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func categoryList(start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, storeId: String? = nil, langId: String? = nil, parentId: String? = nil, avail: Bool? = nil, productType: String? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, findValue: String? = nil, findWhere: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, reportRequestId: String? = nil, disableReportCache: Bool? = nil, disableCache: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ModelResponseCategoryList {
        return try await categoryListWithRequestBuilder(start: start, count: count, pageCursor: pageCursor, storeId: storeId, langId: langId, parentId: parentId, avail: avail, productType: productType, createdFrom: createdFrom, createdTo: createdTo, modifiedFrom: modifiedFrom, modifiedTo: modifiedTo, findValue: findValue, findWhere: findWhere, responseFields: responseFields, params: params, exclude: exclude, reportRequestId: reportRequestId, disableReportCache: disableReportCache, disableCache: disableCache, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     category.list
     - GET /category.list.json
     - Get list of categories from store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter storeId: (query) Retrieves categories specified by store id (optional)
     - parameter langId: (query) Retrieves categorys specified by language id (optional)
     - parameter parentId: (query) Retrieves categories specified by parent id (optional)
     - parameter avail: (query) Defines category&#39;s visibility status (optional, default to true)
     - parameter productType: (query) A categorization for the product (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter findValue: (query) Entity search that is specified by some value (optional)
     - parameter findWhere: (query) Category search that is specified by field (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,parent_id,name,description")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter reportRequestId: (query) Report request id (optional)
     - parameter disableReportCache: (query) Disable report cache for current request (optional, default to false)
     - parameter disableCache: (query) Disable cache for current request (optional, default to false)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ModelResponseCategoryList> 
     */
    open class func categoryListWithRequestBuilder(start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, storeId: String? = nil, langId: String? = nil, parentId: String? = nil, avail: Bool? = nil, productType: String? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, findValue: String? = nil, findWhere: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, reportRequestId: String? = nil, disableReportCache: Bool? = nil, disableCache: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ModelResponseCategoryList> {
        let localVariablePath = "/category.list.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_cursor": (wrappedValue: pageCursor?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "parent_id": (wrappedValue: parentId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "avail": (wrappedValue: avail?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "product_type": (wrappedValue: productType?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "created_from": (wrappedValue: createdFrom?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "created_to": (wrappedValue: createdTo?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "modified_from": (wrappedValue: modifiedFrom?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "modified_to": (wrappedValue: modifiedTo?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "find_value": (wrappedValue: findValue?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "find_where": (wrappedValue: findWhere?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "report_request_id": (wrappedValue: reportRequestId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "disable_report_cache": (wrappedValue: disableReportCache?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "disable_cache": (wrappedValue: disableCache?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseCategoryList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     category.unassign
     
     - parameter categoryId: (query) Defines category unassign, specified by category id 
     - parameter productId: (query) Defines category unassign to the product, specified by product id 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CartConfigUpdate200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func categoryUnassign(categoryId: String, productId: String, storeId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> CartConfigUpdate200Response {
        return try await categoryUnassignWithRequestBuilder(categoryId: categoryId, productId: productId, storeId: storeId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     category.unassign
     - POST /category.unassign.json
     - Unassign category to product
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter categoryId: (query) Defines category unassign, specified by category id 
     - parameter productId: (query) Defines category unassign to the product, specified by product id 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CartConfigUpdate200Response> 
     */
    open class func categoryUnassignWithRequestBuilder(categoryId: String, productId: String, storeId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<CartConfigUpdate200Response> {
        let localVariablePath = "/category.unassign.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "category_id": (wrappedValue: categoryId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "product_id": (wrappedValue: productId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CartConfigUpdate200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     category.update
     
     - parameter id: (query) Defines category update specified by category id 
     - parameter name: (query) Defines new category’s name (optional)
     - parameter description: (query) Defines new category&#39;s description (optional)
     - parameter shortDescription: (query) Defines short description (optional)
     - parameter parentId: (query) Defines new parent category id (optional)
     - parameter avail: (query) Defines category&#39;s visibility status (optional)
     - parameter sortOrder: (query) Sort number in the list (optional)
     - parameter modifiedTime: (query) Entity&#39;s date modification (optional)
     - parameter metaTitle: (query) Defines unique meta title for each entity (optional)
     - parameter metaDescription: (query) Defines unique meta description of a entity (optional)
     - parameter metaKeywords: (query) Defines unique meta keywords for each entity (optional)
     - parameter seoUrl: (query) Defines unique category&#39;s URL for SEO (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter storesIds: (query) Update category in the stores that is specified by comma-separated stores&#39; id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AccountConfigUpdate200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func categoryUpdate(id: String, name: String? = nil, description: String? = nil, shortDescription: String? = nil, parentId: String? = nil, avail: Bool? = nil, sortOrder: Int? = nil, modifiedTime: String? = nil, metaTitle: String? = nil, metaDescription: String? = nil, metaKeywords: String? = nil, seoUrl: String? = nil, storeId: String? = nil, storesIds: String? = nil, langId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AccountConfigUpdate200Response {
        return try await categoryUpdateWithRequestBuilder(id: id, name: name, description: description, shortDescription: shortDescription, parentId: parentId, avail: avail, sortOrder: sortOrder, modifiedTime: modifiedTime, metaTitle: metaTitle, metaDescription: metaDescription, metaKeywords: metaKeywords, seoUrl: seoUrl, storeId: storeId, storesIds: storesIds, langId: langId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     category.update
     - PUT /category.update.json
     - Update category in store
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Defines category update specified by category id 
     - parameter name: (query) Defines new category’s name (optional)
     - parameter description: (query) Defines new category&#39;s description (optional)
     - parameter shortDescription: (query) Defines short description (optional)
     - parameter parentId: (query) Defines new parent category id (optional)
     - parameter avail: (query) Defines category&#39;s visibility status (optional)
     - parameter sortOrder: (query) Sort number in the list (optional)
     - parameter modifiedTime: (query) Entity&#39;s date modification (optional)
     - parameter metaTitle: (query) Defines unique meta title for each entity (optional)
     - parameter metaDescription: (query) Defines unique meta description of a entity (optional)
     - parameter metaKeywords: (query) Defines unique meta keywords for each entity (optional)
     - parameter seoUrl: (query) Defines unique category&#39;s URL for SEO (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter storesIds: (query) Update category in the stores that is specified by comma-separated stores&#39; id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AccountConfigUpdate200Response> 
     */
    open class func categoryUpdateWithRequestBuilder(id: String, name: String? = nil, description: String? = nil, shortDescription: String? = nil, parentId: String? = nil, avail: Bool? = nil, sortOrder: Int? = nil, modifiedTime: String? = nil, metaTitle: String? = nil, metaDescription: String? = nil, metaKeywords: String? = nil, seoUrl: String? = nil, storeId: String? = nil, storesIds: String? = nil, langId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AccountConfigUpdate200Response> {
        let localVariablePath = "/category.update.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "description": (wrappedValue: description?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "short_description": (wrappedValue: shortDescription?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "parent_id": (wrappedValue: parentId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "avail": (wrappedValue: avail?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort_order": (wrappedValue: sortOrder?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "modified_time": (wrappedValue: modifiedTime?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "meta_title": (wrappedValue: metaTitle?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "meta_description": (wrappedValue: metaDescription?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "meta_keywords": (wrappedValue: metaKeywords?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "seo_url": (wrappedValue: seoUrl?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "stores_ids": (wrappedValue: storesIds?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountConfigUpdate200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
