//
// WebhookAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class WebhookAPI {

    /**
     webhook.count
     
     - parameter entity: (query) The entity you want to filter webhooks by (e.g. order or product) (optional)
     - parameter action: (query) The action you want to filter webhooks by (e.g. order or product) (optional)
     - parameter active: (query) The webhook status you want to filter webhooks by (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: WebhookCount200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func webhookCount(entity: String? = nil, action: String? = nil, active: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> WebhookCount200Response {
        return try await webhookCountWithRequestBuilder(entity: entity, action: action, active: active, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     webhook.count
     - GET /webhook.count.json
     - Count registered webhooks on the store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter entity: (query) The entity you want to filter webhooks by (e.g. order or product) (optional)
     - parameter action: (query) The action you want to filter webhooks by (e.g. order or product) (optional)
     - parameter active: (query) The webhook status you want to filter webhooks by (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<WebhookCount200Response> 
     */
    open class func webhookCountWithRequestBuilder(entity: String? = nil, action: String? = nil, active: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<WebhookCount200Response> {
        let localVariablePath = "/webhook.count.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "entity": (wrappedValue: entity?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "action": (wrappedValue: action?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "active": (wrappedValue: active?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookCount200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     webhook.create
     
     - parameter entity: (query) Specify the entity that you want to enable webhooks for (e.g product, order, customer, category) 
     - parameter action: (query) Specify what action (event) will trigger the webhook (e.g add, delete, or update) 
     - parameter callback: (query) Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     - parameter label: (query) The name you give to the webhook (optional)
     - parameter fields: (query) Fields the webhook should send (optional, default to "force_all")
     - parameter active: (query) Webhook status (optional, default to true)
     - parameter storeId: (query) Defines store id where the webhook should be assigned (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: BasketLiveShippingServiceCreate200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func webhookCreate(entity: String, action: String, callback: String? = nil, label: String? = nil, fields: String? = nil, active: Bool? = nil, storeId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> BasketLiveShippingServiceCreate200Response {
        return try await webhookCreateWithRequestBuilder(entity: entity, action: action, callback: callback, label: label, fields: fields, active: active, storeId: storeId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     webhook.create
     - POST /webhook.create.json
     - Create webhook on the store and subscribe to it.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter entity: (query) Specify the entity that you want to enable webhooks for (e.g product, order, customer, category) 
     - parameter action: (query) Specify what action (event) will trigger the webhook (e.g add, delete, or update) 
     - parameter callback: (query) Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     - parameter label: (query) The name you give to the webhook (optional)
     - parameter fields: (query) Fields the webhook should send (optional, default to "force_all")
     - parameter active: (query) Webhook status (optional, default to true)
     - parameter storeId: (query) Defines store id where the webhook should be assigned (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<BasketLiveShippingServiceCreate200Response> 
     */
    open class func webhookCreateWithRequestBuilder(entity: String, action: String, callback: String? = nil, label: String? = nil, fields: String? = nil, active: Bool? = nil, storeId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<BasketLiveShippingServiceCreate200Response> {
        let localVariablePath = "/webhook.create.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "entity": (wrappedValue: entity.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "action": (wrappedValue: action.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "callback": (wrappedValue: callback?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "label": (wrappedValue: label?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "fields": (wrappedValue: fields?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "active": (wrappedValue: active?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BasketLiveShippingServiceCreate200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     webhook.delete
     
     - parameter id: (query) Webhook id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AttributeDelete200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func webhookDelete(id: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AttributeDelete200Response {
        return try await webhookDeleteWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     webhook.delete
     - DELETE /webhook.delete.json
     - Delete registered webhook on the store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Webhook id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AttributeDelete200Response> 
     */
    open class func webhookDeleteWithRequestBuilder(id: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AttributeDelete200Response> {
        let localVariablePath = "/webhook.delete.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeDelete200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     webhook.events
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: WebhookEvents200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func webhookEvents(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> WebhookEvents200Response {
        return try await webhookEventsWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     webhook.events
     - GET /webhook.events.json
     - List all Webhooks that are available on this store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<WebhookEvents200Response> 
     */
    open class func webhookEventsWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<WebhookEvents200Response> {
        let localVariablePath = "/webhook.events.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookEvents200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     webhook.list
     
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter entity: (query) The entity you want to filter webhooks by (e.g. order or product) (optional)
     - parameter action: (query) The action you want to filter webhooks by (e.g. add, update, or delete) (optional)
     - parameter active: (query) The webhook status you want to filter webhooks by (optional)
     - parameter ids: (query) List of сomma-separated webhook ids (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,entity,action,callback")
     - parameter apiConfiguration: The configuration for the http request.
     - returns: WebhookList200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func webhookList(start: Int? = nil, count: Int? = nil, entity: String? = nil, action: String? = nil, active: Bool? = nil, ids: String? = nil, params: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> WebhookList200Response {
        return try await webhookListWithRequestBuilder(start: start, count: count, entity: entity, action: action, active: active, ids: ids, params: params, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     webhook.list
     - GET /webhook.list.json
     - List registered webhook on the store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter entity: (query) The entity you want to filter webhooks by (e.g. order or product) (optional)
     - parameter action: (query) The action you want to filter webhooks by (e.g. add, update, or delete) (optional)
     - parameter active: (query) The webhook status you want to filter webhooks by (optional)
     - parameter ids: (query) List of сomma-separated webhook ids (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,entity,action,callback")
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<WebhookList200Response> 
     */
    open class func webhookListWithRequestBuilder(start: Int? = nil, count: Int? = nil, entity: String? = nil, action: String? = nil, active: Bool? = nil, ids: String? = nil, params: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<WebhookList200Response> {
        let localVariablePath = "/webhook.list.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "entity": (wrappedValue: entity?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "action": (wrappedValue: action?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "active": (wrappedValue: active?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ids": (wrappedValue: ids?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WebhookList200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     webhook.update
     
     - parameter id: (query) Webhook id 
     - parameter callback: (query) Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     - parameter label: (query) The name you give to the webhook (optional)
     - parameter fields: (query) Fields the webhook should send (optional)
     - parameter active: (query) Webhook status (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProductImageUpdate200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func webhookUpdate(id: String, callback: String? = nil, label: String? = nil, fields: String? = nil, active: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProductImageUpdate200Response {
        return try await webhookUpdateWithRequestBuilder(id: id, callback: callback, label: label, fields: fields, active: active, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     webhook.update
     - PUT /webhook.update.json
     - Update Webhooks parameters.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Webhook id 
     - parameter callback: (query) Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     - parameter label: (query) The name you give to the webhook (optional)
     - parameter fields: (query) Fields the webhook should send (optional)
     - parameter active: (query) Webhook status (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProductImageUpdate200Response> 
     */
    open class func webhookUpdateWithRequestBuilder(id: String, callback: String? = nil, label: String? = nil, fields: String? = nil, active: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ProductImageUpdate200Response> {
        let localVariablePath = "/webhook.update.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "callback": (wrappedValue: callback?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "label": (wrappedValue: label?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "fields": (wrappedValue: fields?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "active": (wrappedValue: active?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductImageUpdate200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
