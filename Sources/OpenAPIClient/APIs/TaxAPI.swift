//
// TaxAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class TaxAPI {

    /**
     tax.class.info
     
     - parameter taxClassId: (query) Retrieves taxes specified by class id 
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "tax_class_id,name,avail")
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ModelResponseTaxClassInfo
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func taxClassInfo(taxClassId: String, storeId: String? = nil, langId: String? = nil, params: String? = nil, responseFields: String? = nil, exclude: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ModelResponseTaxClassInfo {
        return try await taxClassInfoWithRequestBuilder(taxClassId: taxClassId, storeId: storeId, langId: langId, params: params, responseFields: responseFields, exclude: exclude, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     tax.class.info
     - GET /tax.class.info.json
     - Use this method to get information about a tax class and its rates. It allows you to calculate the tax percentage for a specific customer's address. This information contains relatively static data that rarely changes, so API2Cart may cache certain data to reduce the load on the store and speed up request execution. We also recommend that you cache the response of this method on your side to save requests. If you need to clear the cache for a specific store, use the cart.validate method.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter taxClassId: (query) Retrieves taxes specified by class id 
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "tax_class_id,name,avail")
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ModelResponseTaxClassInfo> 
     */
    open class func taxClassInfoWithRequestBuilder(taxClassId: String, storeId: String? = nil, langId: String? = nil, params: String? = nil, responseFields: String? = nil, exclude: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ModelResponseTaxClassInfo> {
        let localVariablePath = "/tax.class.info.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tax_class_id": (wrappedValue: taxClassId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseTaxClassInfo>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     tax.class.list
     
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter findValue: (query) Entity search that is specified by some value (optional)
     - parameter findWhere: (query) Tax class search that is specified by field (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "{return_code,return_message,pagination,result}")
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ModelResponseTaxClassList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func taxClassList(createdTo: String? = nil, createdFrom: String? = nil, modifiedTo: String? = nil, modifiedFrom: String? = nil, findValue: String? = nil, findWhere: String? = nil, storeId: String? = nil, count: Int? = nil, pageCursor: String? = nil, responseFields: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ModelResponseTaxClassList {
        return try await taxClassListWithRequestBuilder(createdTo: createdTo, createdFrom: createdFrom, modifiedTo: modifiedTo, modifiedFrom: modifiedFrom, findValue: findValue, findWhere: findWhere, storeId: storeId, count: count, pageCursor: pageCursor, responseFields: responseFields, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     tax.class.list
     - GET /tax.class.list.json
     - Get list of tax classes from your store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter findValue: (query) Entity search that is specified by some value (optional)
     - parameter findWhere: (query) Tax class search that is specified by field (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "{return_code,return_message,pagination,result}")
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ModelResponseTaxClassList> 
     */
    open class func taxClassListWithRequestBuilder(createdTo: String? = nil, createdFrom: String? = nil, modifiedTo: String? = nil, modifiedFrom: String? = nil, findValue: String? = nil, findWhere: String? = nil, storeId: String? = nil, count: Int? = nil, pageCursor: String? = nil, responseFields: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ModelResponseTaxClassList> {
        let localVariablePath = "/tax.class.list.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "created_to": (wrappedValue: createdTo?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "created_from": (wrappedValue: createdFrom?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "modified_to": (wrappedValue: modifiedTo?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "modified_from": (wrappedValue: modifiedFrom?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "find_value": (wrappedValue: findValue?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "find_where": (wrappedValue: findWhere?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page_cursor": (wrappedValue: pageCursor?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseTaxClassList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
