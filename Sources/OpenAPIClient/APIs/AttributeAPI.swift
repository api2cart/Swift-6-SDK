//
// AttributeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class AttributeAPI {

    /**
     * enum for parameter type
     */
    public enum ModelType_attributeAdd: String, Sendable, CaseIterable {
        case text = "text"
        case select = "select"
        case textarea = "textarea"
        case date = "date"
        case price = "price"
        case multiselect = "multiselect"
        case boolean = "boolean"
    }

    /**
     attribute.add
     
     - parameter type: (query) Defines attribute&#39;s type 
     - parameter name: (query) Defines attributes&#39;s name 
     - parameter code: (query) Entity code (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter visible: (query) Set visibility status (optional, default to false)
     - parameter _required: (query) Defines if the option is required (optional, default to false)
     - parameter position: (query) Attribute&#x60;s position (optional, default to 0)
     - parameter attributeGroupId: (query) Filter by attribute_group_id (optional)
     - parameter isGlobal: (query) Attribute saving scope (optional, default to "Store")
     - parameter isSearchable: (query) Use attribute in Quick Search (optional, default to false)
     - parameter isFilterable: (query) Use In Layered Navigation (optional, default to "No")
     - parameter isComparable: (query) Comparable on Front-end (optional, default to false)
     - parameter isHtmlAllowedOnFront: (query) Allow HTML Tags on Frontend (optional, default to false)
     - parameter isFilterableInSearch: (query) Use In Search Results Layered Navigation (optional, default to false)
     - parameter isConfigurable: (query) Use To Create Configurable Product (optional, default to false)
     - parameter isVisibleInAdvancedSearch: (query) Use in Advanced Search (optional, default to false)
     - parameter isUsedForPromoRules: (query) Use for Promo Rule Conditions (optional, default to false)
     - parameter usedInProductListing: (query) Used in Product Listing (optional, default to false)
     - parameter usedForSortBy: (query) Used for Sorting in Product Listing (optional, default to false)
     - parameter applyTo: (query) Types of products which can have this attribute (optional, default to "all_types")
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AttributeAdd200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func attributeAdd(type: ModelType_attributeAdd, name: String, code: String? = nil, storeId: String? = nil, langId: String? = nil, visible: Bool? = nil, _required: Bool? = nil, position: Int? = nil, attributeGroupId: String? = nil, isGlobal: String? = nil, isSearchable: Bool? = nil, isFilterable: String? = nil, isComparable: Bool? = nil, isHtmlAllowedOnFront: Bool? = nil, isFilterableInSearch: Bool? = nil, isConfigurable: Bool? = nil, isVisibleInAdvancedSearch: Bool? = nil, isUsedForPromoRules: Bool? = nil, usedInProductListing: Bool? = nil, usedForSortBy: Bool? = nil, applyTo: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AttributeAdd200Response {
        return try await attributeAddWithRequestBuilder(type: type, name: name, code: code, storeId: storeId, langId: langId, visible: visible, _required: _required, position: position, attributeGroupId: attributeGroupId, isGlobal: isGlobal, isSearchable: isSearchable, isFilterable: isFilterable, isComparable: isComparable, isHtmlAllowedOnFront: isHtmlAllowedOnFront, isFilterableInSearch: isFilterableInSearch, isConfigurable: isConfigurable, isVisibleInAdvancedSearch: isVisibleInAdvancedSearch, isUsedForPromoRules: isUsedForPromoRules, usedInProductListing: usedInProductListing, usedForSortBy: usedForSortBy, applyTo: applyTo, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     attribute.add
     - POST /attribute.add.json
     - Add new attribute
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter type: (query) Defines attribute&#39;s type 
     - parameter name: (query) Defines attributes&#39;s name 
     - parameter code: (query) Entity code (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter visible: (query) Set visibility status (optional, default to false)
     - parameter _required: (query) Defines if the option is required (optional, default to false)
     - parameter position: (query) Attribute&#x60;s position (optional, default to 0)
     - parameter attributeGroupId: (query) Filter by attribute_group_id (optional)
     - parameter isGlobal: (query) Attribute saving scope (optional, default to "Store")
     - parameter isSearchable: (query) Use attribute in Quick Search (optional, default to false)
     - parameter isFilterable: (query) Use In Layered Navigation (optional, default to "No")
     - parameter isComparable: (query) Comparable on Front-end (optional, default to false)
     - parameter isHtmlAllowedOnFront: (query) Allow HTML Tags on Frontend (optional, default to false)
     - parameter isFilterableInSearch: (query) Use In Search Results Layered Navigation (optional, default to false)
     - parameter isConfigurable: (query) Use To Create Configurable Product (optional, default to false)
     - parameter isVisibleInAdvancedSearch: (query) Use in Advanced Search (optional, default to false)
     - parameter isUsedForPromoRules: (query) Use for Promo Rule Conditions (optional, default to false)
     - parameter usedInProductListing: (query) Used in Product Listing (optional, default to false)
     - parameter usedForSortBy: (query) Used for Sorting in Product Listing (optional, default to false)
     - parameter applyTo: (query) Types of products which can have this attribute (optional, default to "all_types")
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AttributeAdd200Response> 
     */
    open class func attributeAddWithRequestBuilder(type: ModelType_attributeAdd, name: String, code: String? = nil, storeId: String? = nil, langId: String? = nil, visible: Bool? = nil, _required: Bool? = nil, position: Int? = nil, attributeGroupId: String? = nil, isGlobal: String? = nil, isSearchable: Bool? = nil, isFilterable: String? = nil, isComparable: Bool? = nil, isHtmlAllowedOnFront: Bool? = nil, isFilterableInSearch: Bool? = nil, isConfigurable: Bool? = nil, isVisibleInAdvancedSearch: Bool? = nil, isUsedForPromoRules: Bool? = nil, usedInProductListing: Bool? = nil, usedForSortBy: Bool? = nil, applyTo: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AttributeAdd200Response> {
        let localVariablePath = "/attribute.add.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": (wrappedValue: type.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "code": (wrappedValue: code?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "visible": (wrappedValue: visible?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "required": (wrappedValue: _required?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "position": (wrappedValue: position?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "attribute_group_id": (wrappedValue: attributeGroupId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "is_global": (wrappedValue: isGlobal?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "is_searchable": (wrappedValue: isSearchable?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "is_filterable": (wrappedValue: isFilterable?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "is_comparable": (wrappedValue: isComparable?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "is_html_allowed_on_front": (wrappedValue: isHtmlAllowedOnFront?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "is_filterable_in_search": (wrappedValue: isFilterableInSearch?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "is_configurable": (wrappedValue: isConfigurable?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "is_visible_in_advanced_search": (wrappedValue: isVisibleInAdvancedSearch?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "is_used_for_promo_rules": (wrappedValue: isUsedForPromoRules?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "used_in_product_listing": (wrappedValue: usedInProductListing?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "used_for_sort_by": (wrappedValue: usedForSortBy?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "apply_to": (wrappedValue: applyTo?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeAdd200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     attribute.assign.group
     
     - parameter id: (query) Entity id 
     - parameter groupId: (query) Attribute group_id 
     - parameter attributeSetId: (query) Attribute set id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AttributeAssignGroup200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func attributeAssignGroup(id: String, groupId: String, attributeSetId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AttributeAssignGroup200Response {
        return try await attributeAssignGroupWithRequestBuilder(id: id, groupId: groupId, attributeSetId: attributeSetId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     attribute.assign.group
     - POST /attribute.assign.group.json
     - Assign attribute to the group
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Entity id 
     - parameter groupId: (query) Attribute group_id 
     - parameter attributeSetId: (query) Attribute set id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AttributeAssignGroup200Response> 
     */
    open class func attributeAssignGroupWithRequestBuilder(id: String, groupId: String, attributeSetId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AttributeAssignGroup200Response> {
        let localVariablePath = "/attribute.assign.group.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "group_id": (wrappedValue: groupId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "attribute_set_id": (wrappedValue: attributeSetId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeAssignGroup200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     attribute.assign.set
     
     - parameter id: (query) Entity id 
     - parameter attributeSetId: (query) Attribute set id 
     - parameter groupId: (query) Attribute group_id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AttributeAssignGroup200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func attributeAssignSet(id: String, attributeSetId: String, groupId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AttributeAssignGroup200Response {
        return try await attributeAssignSetWithRequestBuilder(id: id, attributeSetId: attributeSetId, groupId: groupId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     attribute.assign.set
     - POST /attribute.assign.set.json
     - Assign attribute to the attribute set
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Entity id 
     - parameter attributeSetId: (query) Attribute set id 
     - parameter groupId: (query) Attribute group_id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AttributeAssignGroup200Response> 
     */
    open class func attributeAssignSetWithRequestBuilder(id: String, attributeSetId: String, groupId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AttributeAssignGroup200Response> {
        let localVariablePath = "/attribute.assign.set.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "group_id": (wrappedValue: groupId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "attribute_set_id": (wrappedValue: attributeSetId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeAssignGroup200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     attribute.attributeset.list
     
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ModelResponseAttributeAttributesetList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func attributeAttributesetList(start: Int? = nil, count: Int? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ModelResponseAttributeAttributesetList {
        return try await attributeAttributesetListWithRequestBuilder(start: start, count: count, responseFields: responseFields, params: params, exclude: exclude, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     attribute.attributeset.list
     - GET /attribute.attributeset.list.json
     - Get attribute_set list
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ModelResponseAttributeAttributesetList> 
     */
    open class func attributeAttributesetListWithRequestBuilder(start: Int? = nil, count: Int? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ModelResponseAttributeAttributesetList> {
        let localVariablePath = "/attribute.attributeset.list.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseAttributeAttributesetList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     attribute.count
     
     - parameter type: (query) Defines attribute&#39;s type (optional)
     - parameter attributeSetId: (query) Filter items by attribute set id (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter visible: (query) Filter items by visibility status (optional)
     - parameter _required: (query) Defines if the option is required (optional)
     - parameter system: (query) True if attribute is system (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AttributeCount200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func attributeCount(type: String? = nil, attributeSetId: String? = nil, storeId: String? = nil, langId: String? = nil, visible: Bool? = nil, _required: Bool? = nil, system: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AttributeCount200Response {
        return try await attributeCountWithRequestBuilder(type: type, attributeSetId: attributeSetId, storeId: storeId, langId: langId, visible: visible, _required: _required, system: system, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     attribute.count
     - GET /attribute.count.json
     - Get attributes count
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter type: (query) Defines attribute&#39;s type (optional)
     - parameter attributeSetId: (query) Filter items by attribute set id (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter visible: (query) Filter items by visibility status (optional)
     - parameter _required: (query) Defines if the option is required (optional)
     - parameter system: (query) True if attribute is system (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AttributeCount200Response> 
     */
    open class func attributeCountWithRequestBuilder(type: String? = nil, attributeSetId: String? = nil, storeId: String? = nil, langId: String? = nil, visible: Bool? = nil, _required: Bool? = nil, system: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AttributeCount200Response> {
        let localVariablePath = "/attribute.count.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": (wrappedValue: type?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "attribute_set_id": (wrappedValue: attributeSetId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "visible": (wrappedValue: visible?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "required": (wrappedValue: _required?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "system": (wrappedValue: system?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeCount200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     attribute.delete
     
     - parameter id: (query) Entity id 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AttributeDelete200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func attributeDelete(id: String, storeId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AttributeDelete200Response {
        return try await attributeDeleteWithRequestBuilder(id: id, storeId: storeId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     attribute.delete
     - DELETE /attribute.delete.json
     - Delete attribute from store
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Entity id 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AttributeDelete200Response> 
     */
    open class func attributeDeleteWithRequestBuilder(id: String, storeId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AttributeDelete200Response> {
        let localVariablePath = "/attribute.delete.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeDelete200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     attribute.group.list
     
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter attributeSetId: (query) Attribute set id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ModelResponseAttributeGroupList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func attributeGroupList(start: Int? = nil, count: Int? = nil, attributeSetId: String? = nil, langId: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ModelResponseAttributeGroupList {
        return try await attributeGroupListWithRequestBuilder(start: start, count: count, attributeSetId: attributeSetId, langId: langId, responseFields: responseFields, params: params, exclude: exclude, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     attribute.group.list
     - GET /attribute.group.list.json
     - Get attribute group list
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter attributeSetId: (query) Attribute set id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ModelResponseAttributeGroupList> 
     */
    open class func attributeGroupListWithRequestBuilder(start: Int? = nil, count: Int? = nil, attributeSetId: String? = nil, langId: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ModelResponseAttributeGroupList> {
        let localVariablePath = "/attribute.group.list.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "attribute_set_id": (wrappedValue: attributeSetId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseAttributeGroupList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     attribute.info
     
     - parameter id: (query) Entity id 
     - parameter attributeSetId: (query) Attribute set id (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "force_all")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AttributeInfo200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func attributeInfo(id: String, attributeSetId: String? = nil, storeId: String? = nil, langId: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AttributeInfo200Response {
        return try await attributeInfoWithRequestBuilder(id: id, attributeSetId: attributeSetId, storeId: storeId, langId: langId, responseFields: responseFields, params: params, exclude: exclude, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     attribute.info
     - GET /attribute.info.json
     - Get information about a specific global attribute by its ID.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Entity id 
     - parameter attributeSetId: (query) Attribute set id (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "force_all")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AttributeInfo200Response> 
     */
    open class func attributeInfoWithRequestBuilder(id: String, attributeSetId: String? = nil, storeId: String? = nil, langId: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AttributeInfo200Response> {
        let localVariablePath = "/attribute.info.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "attribute_set_id": (wrappedValue: attributeSetId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeInfo200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     attribute.list
     
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter attributeIds: (query) Filter attributes by ids (optional)
     - parameter attributeSetId: (query) Filter items by attribute set id (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Retrieves attributes on specified language id (optional)
     - parameter type: (query) Defines attribute&#39;s type (optional)
     - parameter visible: (query) Filter items by visibility status (optional)
     - parameter _required: (query) Defines if the option is required (optional)
     - parameter system: (query) True if attribute is system (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name,code,type")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ModelResponseAttributeList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func attributeList(start: Int? = nil, count: Int? = nil, attributeIds: String? = nil, attributeSetId: String? = nil, storeId: String? = nil, langId: String? = nil, type: String? = nil, visible: Bool? = nil, _required: Bool? = nil, system: Bool? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ModelResponseAttributeList {
        return try await attributeListWithRequestBuilder(start: start, count: count, attributeIds: attributeIds, attributeSetId: attributeSetId, storeId: storeId, langId: langId, type: type, visible: visible, _required: _required, system: system, responseFields: responseFields, params: params, exclude: exclude, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     attribute.list
     - GET /attribute.list.json
     - Get a list of global attributes.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter attributeIds: (query) Filter attributes by ids (optional)
     - parameter attributeSetId: (query) Filter items by attribute set id (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Retrieves attributes on specified language id (optional)
     - parameter type: (query) Defines attribute&#39;s type (optional)
     - parameter visible: (query) Filter items by visibility status (optional)
     - parameter _required: (query) Defines if the option is required (optional)
     - parameter system: (query) True if attribute is system (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name,code,type")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ModelResponseAttributeList> 
     */
    open class func attributeListWithRequestBuilder(start: Int? = nil, count: Int? = nil, attributeIds: String? = nil, attributeSetId: String? = nil, storeId: String? = nil, langId: String? = nil, type: String? = nil, visible: Bool? = nil, _required: Bool? = nil, system: Bool? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ModelResponseAttributeList> {
        let localVariablePath = "/attribute.list.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "attribute_ids": (wrappedValue: attributeIds?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "attribute_set_id": (wrappedValue: attributeSetId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "visible": (wrappedValue: visible?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "required": (wrappedValue: _required?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "system": (wrappedValue: system?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseAttributeList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     attribute.type.list
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AttributeTypeList200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func attributeTypeList(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AttributeTypeList200Response {
        return try await attributeTypeListWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     attribute.type.list
     - GET /attribute.type.list.json
     - Get list of supported attributes types
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AttributeTypeList200Response> 
     */
    open class func attributeTypeListWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AttributeTypeList200Response> {
        let localVariablePath = "/attribute.type.list.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeTypeList200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     attribute.unassign.group
     
     - parameter id: (query) Entity id 
     - parameter groupId: (query) Customer group_id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AttributeUnassignGroup200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func attributeUnassignGroup(id: String, groupId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AttributeUnassignGroup200Response {
        return try await attributeUnassignGroupWithRequestBuilder(id: id, groupId: groupId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     attribute.unassign.group
     - POST /attribute.unassign.group.json
     - Unassign attribute from group
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Entity id 
     - parameter groupId: (query) Customer group_id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AttributeUnassignGroup200Response> 
     */
    open class func attributeUnassignGroupWithRequestBuilder(id: String, groupId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AttributeUnassignGroup200Response> {
        let localVariablePath = "/attribute.unassign.group.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "group_id": (wrappedValue: groupId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeUnassignGroup200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     attribute.unassign.set
     
     - parameter id: (query) Entity id 
     - parameter attributeSetId: (query) Attribute set id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AttributeUnassignGroup200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func attributeUnassignSet(id: String, attributeSetId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AttributeUnassignGroup200Response {
        return try await attributeUnassignSetWithRequestBuilder(id: id, attributeSetId: attributeSetId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     attribute.unassign.set
     - POST /attribute.unassign.set.json
     - Unassign attribute from attribute set
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Entity id 
     - parameter attributeSetId: (query) Attribute set id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AttributeUnassignGroup200Response> 
     */
    open class func attributeUnassignSetWithRequestBuilder(id: String, attributeSetId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AttributeUnassignGroup200Response> {
        let localVariablePath = "/attribute.unassign.set.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "attribute_set_id": (wrappedValue: attributeSetId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeUnassignGroup200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     attribute.update
     
     - parameter id: (query) Entity id 
     - parameter name: (query) Defines new attributes&#39;s name 
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AttributeUpdate200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func attributeUpdate(id: String, name: String, storeId: String? = nil, langId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AttributeUpdate200Response {
        return try await attributeUpdateWithRequestBuilder(id: id, name: name, storeId: storeId, langId: langId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     attribute.update
     - PUT /attribute.update.json
     - Update attribute data
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Entity id 
     - parameter name: (query) Defines new attributes&#39;s name 
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AttributeUpdate200Response> 
     */
    open class func attributeUpdateWithRequestBuilder(id: String, name: String, storeId: String? = nil, langId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AttributeUpdate200Response> {
        let localVariablePath = "/attribute.update.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeUpdate200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     attribute.value.add
     
     - parameter attributeId: (query) Attribute Id 
     - parameter name: (query) Defines attribute value&#39;s name 
     - parameter code: (query) Entity code (optional)
     - parameter description: (query) Defines attribute value&#39;s description (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AttributeAdd200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func attributeValueAdd(attributeId: String, name: String, code: String? = nil, description: String? = nil, storeId: String? = nil, langId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AttributeAdd200Response {
        return try await attributeValueAddWithRequestBuilder(attributeId: attributeId, name: name, code: code, description: description, storeId: storeId, langId: langId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     attribute.value.add
     - POST /attribute.value.add.json
     - Add new value to attribute.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter attributeId: (query) Attribute Id 
     - parameter name: (query) Defines attribute value&#39;s name 
     - parameter code: (query) Entity code (optional)
     - parameter description: (query) Defines attribute value&#39;s description (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AttributeAdd200Response> 
     */
    open class func attributeValueAddWithRequestBuilder(attributeId: String, name: String, code: String? = nil, description: String? = nil, storeId: String? = nil, langId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AttributeAdd200Response> {
        let localVariablePath = "/attribute.value.add.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "attribute_id": (wrappedValue: attributeId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "code": (wrappedValue: code?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "description": (wrappedValue: description?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeAdd200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     attribute.value.delete
     
     - parameter id: (query) Entity id 
     - parameter attributeId: (query) Attribute Id 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AttributeValueDelete200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func attributeValueDelete(id: String, attributeId: String, storeId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AttributeValueDelete200Response {
        return try await attributeValueDeleteWithRequestBuilder(id: id, attributeId: attributeId, storeId: storeId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     attribute.value.delete
     - DELETE /attribute.value.delete.json
     - Delete attribute value.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Entity id 
     - parameter attributeId: (query) Attribute Id 
     - parameter storeId: (query) Store Id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AttributeValueDelete200Response> 
     */
    open class func attributeValueDeleteWithRequestBuilder(id: String, attributeId: String, storeId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AttributeValueDelete200Response> {
        let localVariablePath = "/attribute.value.delete.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "attribute_id": (wrappedValue: attributeId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeValueDelete200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     attribute.value.update
     
     - parameter id: (query) Defines attribute value&#39;s id 
     - parameter attributeId: (query) Attribute Id 
     - parameter name: (query) Defines attribute value&#39;s name (optional)
     - parameter description: (query) Defines new attribute value&#39;s description (optional)
     - parameter code: (query) Entity code (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AttributeUpdate200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func attributeValueUpdate(id: String, attributeId: String, name: String? = nil, description: String? = nil, code: String? = nil, storeId: String? = nil, langId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AttributeUpdate200Response {
        return try await attributeValueUpdateWithRequestBuilder(id: id, attributeId: attributeId, name: name, description: description, code: code, storeId: storeId, langId: langId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     attribute.value.update
     - PUT /attribute.value.update.json
     - Update attribute value.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Defines attribute value&#39;s id 
     - parameter attributeId: (query) Attribute Id 
     - parameter name: (query) Defines attribute value&#39;s name (optional)
     - parameter description: (query) Defines new attribute value&#39;s description (optional)
     - parameter code: (query) Entity code (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AttributeUpdate200Response> 
     */
    open class func attributeValueUpdateWithRequestBuilder(id: String, attributeId: String, name: String? = nil, description: String? = nil, code: String? = nil, storeId: String? = nil, langId: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AttributeUpdate200Response> {
        let localVariablePath = "/attribute.value.update.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "attribute_id": (wrappedValue: attributeId.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "description": (wrappedValue: description?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "code": (wrappedValue: code?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeUpdate200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
